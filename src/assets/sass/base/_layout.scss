

/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}


body {
	background: $color-background;
	background-image: url(../img/bg_concrete_dark.jpg);
	background-position: 50% 0;
	background-size: 100% auto;
	background-attachment: fixed;

	margin:0;
	padding:0;
	text-align:center;
}


.content-section {
	padding: vw-units($section-margin-v * 2) vw-units($section-margin-h);
	//transform: translate3d(0,0,0);
	/*
	background-image: url(../img/bg_concrete_dark.jpg);
	background-position: 50% 0;
	//background-size: 100% auto;
	background-size: cover;
	background-attachment: fixed;
*/
	> h1,
	> h2,
	> p {
		margin: vw-units($section-margin-v * 2) 0;

		+ h1,
		+ h2,
		+ p {
			margin-top: -0.8 * vw-units($section-margin-v * 2);

		}
	}


	> *:first-child {
		margin-top: 0;
	}
	> *:last-child {
		margin-bottom: 0;
	}


	> h2,
	> p {
		@include adjust-font-size-to($size-xxl);
		@include letter-spacing-sm;
		font-style: italic;

	}

	@include breakpoint($sm) {
		padding: vw-units($section-margin-v) vw-units($section-margin-h);

		> h1,
		> h2,
		> p {
			margin: vw-units($section-margin-v) 0;

			+ h1,
			+ h2,
			+ p {
				margin-top: -0.8 * vw-units($section-margin-v);

			}
		}
	}


	.csstransforms3d &:nth-of-type(n+2) {
		> h1,
		> h2,
		> p {
			opacity: 0;
			transition-property: opacity transform;
			transition-duration: .5s;
			transition-timing-function: ease;

			@for $i from 1 through 5 {
				&:nth-child(#{$i}) {

				@if $i % 2 == 1 {
					transform: translate3d(-5%,0,0);
				}
				@else {
					transform: translate3d(5%,0,0);
				}
				
			  	//transition-delay: #{.1 + $i * 0.05 }s;
			  	transition-delay: #{$i * 0.05 }s;
			  }
			}
		}

		&.active {
			> h1,
			> h2,
			> p {
				transform: translate3d(0,0,0);
				opacity: 1;
			}
		}

	}
}
